@Override
public List<ProductResDTO> getProductsByFilter(ProdFilterReqDTO product) {
    // Retrieve image IDs based on color and/or size
    List<Long> imgids = new ArrayList<>();
    if (product.getColor() != null && product.getSize() != null) {
        imgids = filter.findByColorAndSize(product.getColor(), product.getSize());
    } else if (product.getColor() != null) {
        imgids = filter.findByColor(product.getColor());
    } else if (product.getSize() != null) {
        imgids = filter.findBySize(product.getSize());
    }

    // Retrieve all products or filter by category if specified
    List<Product> allProducts = (product.getCat() == null) ? prod.findAll() : prod.findByCategoryName(product.getCat());

    // Filter products based on price range if specified
    List<Product> filteredProducts = allProducts.stream()
        .filter(p -> product.getPrice() == null ||
                     (p.getPrice() >= product.getPrice()[0] && p.getPrice() <= product.getPrice()[1]))
        .collect(Collectors.toList());

    List<ProductResDTO> result = new ArrayList<>();

    for (Product p : filteredProducts) {
        // Retrieve variants for the product
        List<ProductVariant> variants = variant.findBypid(p.getPid());

        // Filter variants based on image IDs, color, and size if filters are applied
        List<ProductVariant> filteredVariants = imgids.isEmpty() ? variants : 
            variants.stream()
                .filter(v -> imgids.contains(v.getImgid()))
                .collect(Collectors.toList());

        ProductResDTO dto = new ProductResDTO();
        dto.setProduct(p);
        dto.setVariants(filteredVariants.stream()
            .map(v -> mapper.map(v, ProductVariantDTO.class))  // Map to DTO
            .collect(Collectors.toList()));

        result.add(dto);
    }

    return result;
}
