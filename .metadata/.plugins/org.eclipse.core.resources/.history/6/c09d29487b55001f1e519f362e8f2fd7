package com.app.Services;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.Dao.FilterDao;
import com.app.Dao.ProductDao;
import com.app.Dao.ProductVariantDao;
import com.app.Entities.Product;
import com.app.Entities.ProductVariant;
import com.app.dto.ProdFilterReqDTO;
import com.app.dto.ProductReqDTO;
import com.app.dto.ProductResDTO;
import com.app.dto.ProductVariantDTO;

import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Transactional
public class ProductServiceImpl implements ProductService {

    @Autowired 
    private ProductDao prod;
    
    @Autowired 
    private ProductVariantDao variant;
    
    @Autowired
    private FilterDao filter;
    
    @Autowired
    private ModelMapper mapper;

    @Override
    public List<ProductResDTO> getProductsByFilter(ProdFilterReqDTO product) {
        final List<Long> imgids;
        if (product.getColor() != null && product.getSize() != null) {
            imgids = filter.findByColorAndSize(product.getColor(), product.getSize());
        } else {
            imgids = new ArrayList<>();  // Initialize to an empty list if no filters are provided
        }

        List<Product> allProducts = (product.getCat() == null) ? prod.findAll() : prod.findByCategoryName(product.getCat());
        List<Product> filteredProducts = new ArrayList<>();

        if (product.getPrice() != null) {
            double minPrice = product.getPrice()[0];
            double maxPrice = product.getPrice()[1];
            filteredProducts = allProducts.stream()
                .filter(p -> p.getPrice() >= minPrice && p.getPrice() <= maxPrice)
                .collect(Collectors.toList());
        } else {
            filteredProducts = allProducts;
        }

        List<ProductResDTO> result = new ArrayList<>();
        for (Product p : filteredProducts) {
            List<ProductVariant> variants = variant.findBypid(p.getPid());

            List<ProductVariant> filteredVariants = imgids.isEmpty() ? variants : 
                variants.stream()
                .filter(v -> imgids.contains(v.getImgid()))
                .collect(Collectors.toList());

            ProductResDTO dto = new ProductResDTO();
            dto.setProduct(p);
            dto.setVariants(filteredVariants.stream()
                .map(v -> mapper.map(v, ProductVariantDTO.class))  
                .collect(Collectors.toList()));

            result.add(dto);
        }

        return result;
    }


    @Override
    public String addProduct(ProductReqDTO prods) {
        // Save the product
        Product newProduct = prod.save(prods.getProduct());
        
        // Check if variants are provided
        if (prods.getVariants() != null && !prods.getVariants().isEmpty()) {
            // Map ProductVariantDTO to ProductVariant
            List<ProductVariant> productVariants = prods.getVariants().stream().map(variantDTO -> {
                ProductVariant variant = new ProductVariant();
                variant.setColor(variantDTO.getColor());
                variant.setStock(variantDTO.getStock());
                variant.setImgid(variantDTO.getImgid());
                variant.setProduct(newProduct);  
                return variant;
            }).collect(Collectors.toList());

            // Save the product variants
            variant.saveAll(productVariants);
        }
        
        return "Product added successfully!";
    }
}
